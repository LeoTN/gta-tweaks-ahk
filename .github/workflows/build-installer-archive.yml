name: Build GTAV_Tweaks Archive

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release Version"
        type: string
        default: "0.0.0"
        required: true

      is_pre_release:
        type: boolean
        description: "Beta-Release"
        default: true
        required: true
        
  workflow_call:
    inputs:
      version:
        description: "Release Version"
        type: string
        default: "0.0.0"
        required: true

      is_pre_release:
        type: boolean
        description: Beta-Release"
        default: true
        required: true

env:
  FINAL_EXECUTABLE_NAME: GTAV_Tweaks.exe
  FINAL_INSTALLER_ARCHIVE_NAME: GTAV_Tweaks.zip
  RELEASE_VERSION: ${{ inputs.version }}
  RELEASE_NAME: ""
  IS_PRE_RELEASE: ${{ inputs.is_pre_release }}

jobs:
  build_exe_files:
    name: Build and Upload Executable Artifacts
    runs-on: windows-2019

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Create Version File
      run: |
        function readFromCSVFile() {
            Param(
                [Parameter(Mandatory = $true)]
                [String]$pFileLocation
            )
            
            # Stops here because the file does not exist.
            If (-not (Test-Path -Path $pFileLocation)) {
                Write-Host "[readFromCSVFile()] [WARNING] The file [$pFileLocation] does not exist." -ForegroundColor "Yellow"
                # We are using $null because $false would cause an error.
                Return $null
            }
            Try {
                # Reads the .CSV file and converts it into a hashtable.
                $content = @{}
                Import-Csv -Path $pFileLocation | ForEach-Object {
                    $content[$_.Key] = $_.Value
                }
                Write-Host "[readFromCSVFile()] [INFO] The content of the CSV file [$pFileLocation] has been successfully read."
                Return $content
            }
            Catch {
                Write-Host "[readFromCSVFile()] [ERROR] Failed to read the content of the CSV file [$pFileLocation]. Detailed error description below.`n" -ForegroundColor "Red"
                Write-Host "***START***[`n$Error`n]***END***" -ForegroundColor "Red"
                # DO NOT REMOVE THIS COMMENT! Removing this space cause the function to return parts of the error object.
                # We are using $null because $false would cause an error.
                Return $null
            }
        }

        function writeToCSVFile() {
            Param(
                [Parameter(Mandatory = $true)]
                [String]$pFileLocation,
                [Parameter(Mandatory = $true)]
                [hashtable]$pContent,
                [Parameter(Mandatory = $false)]
                [switch]$pSwitchForce
            )
        
            # Stops here because the file exists and the function is told to not overwrite the file.
            If ((Test-Path -Path $pFileLocation) -and !$pSwitchForce) {
                Write-Host "[writeToCSVFile()] [WARNING] The file [$pFileLocation] is already present. Use [-pSwitchForce] to overwrite it." -ForegroundColor "Yellow"
                Return $false
            }
            Try {
                # Writes the hashtable into the file.
                $pContent.GetEnumerator() | Select-Object -Property @{Name = "Key"; Expression = { $_.Key } }, @{Name = "Value"; Expression = { $_.Value } } | Export-Csv -Path $pFileLocation -Encoding Default -NoTypeInformation
                Write-Host "[writeToCSVFile()] [INFO] The given hashtable has been successfully written to [$pFileLocation]."
                Return $true
            }
            Catch {
                Write-Host "[writeToCSVFile()] [ERROR] Failed to write the given hashtable to [$pFileLocation]. Detailed error description below.`n" -ForegroundColor "Red"
                Write-Host "***START***[`n$Error`n]***END***" -ForegroundColor "Red"
                # DO NOT REMOVE THIS COMMENT! Removing this space cause the function to return parts of the error object.
                Return $false
            }
        }

        if ($env:IS_PRE_RELEASE -eq "true") {
            $releaseName = "v${env:RELEASE_VERSION}-beta"
        }
        else {
            $releaseName = "v${env:RELEASE_VERSION}"
        }

        # Updates the current version file.
        $currentVersionFileLocation = "${{ github.workspace }}\library\build\currentVersion.csv"
        $currentVersionFileObject = readFromCSVFile -pFileLocation $currentVersionFileLocation
        $currentVersionFileObject["CURRENT_VERSION"] = $releaseName
        writeToCSVFile -pFileLocation $currentVersionFileLocation -pContent $currentVersionFileObject -pSwitchForce | Out-Null

    - name: Extract Autohotkey Compiler
      run: |
        # Set Variables
        $ahkFolder = "${{ github.workspace }}\ahk"
        $ahkV2Folder = "${{ github.workspace }}\ahk-v2"

        # Extract the files.
        Expand-Archive -Path "${{ github.workspace }}\compiler\ahk.zip" -DestinationPath $ahkFolder
        Expand-Archive -Path "${{ github.workspace }}\compiler\ahk-v2.zip" -DestinationPath $ahkV2Folder

    - name: Compile Autohotkey Main Script
      run: |
        # Set the paths to execute more easily.
        $scriptPathIn = "${{ github.workspace }}\GTAV_Tweaks.ahk"
        $scriptPathOut = "${{ github.workspace }}\$env:FINAL_EXECUTABLE_NAME"

        # Compile the script.
        Start-Process -FilePath ".\ahk\Compiler\Ahk2Exe.exe" -ArgumentList "/in $scriptPathIn /out $scriptPathOut /base "".\ahk-v2\AutoHotkey64.exe"" /silent verbose" -Wait
        echo "The executable will be saved to $scriptPathOut"

    - name: Upload Main Executable as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.FINAL_EXECUTABLE_NAME }}
        path: ${{ github.workspace }}\${{ env.FINAL_EXECUTABLE_NAME }}
 
  create_release:
    name: Download Executable Artifacts and Create Release
    needs: build_exe_files
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Download Installer Artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.FINAL_EXECUTABLE_NAME }}
        path: ${{ github.workspace }}/library/build

    - name: Set Release Name
      run: |
        if [ "${{ env.IS_PRE_RELEASE }}" == "true" ]; then
          releaseName="v${{ env.RELEASE_VERSION }}-beta"
        else
          releaseName="v${{ env.RELEASE_VERSION }}"
        fi
        echo "RELEASE_NAME=$releaseName" >> $GITHUB_ENV
        cat <<"EOF" > "${{ github.workspace }}/library/build/version.txt"

          ####################################################
          #                                                  #
          #  ______________________      ___    __           #
          #  __  ____/__  __/__    |     __ |  / /           #
          #  _  / __ __  /  __  /| |     __ | / /            #
          #  / /_/ / _  /   _  ___ |     __ |/ /             #
          #  \____/  /_/    /_/  |_|     _____/              #
          #                                                  #
          #  ________                     ______             #
          #  ___  __/__      ____________ ___  /_________    #
          #  __  /  __ | /| / /  _ \  __ `/_  //_/_  ___/    #
          #  _  /   __ |/ |/ //  __/ /_/ /_  ,<  _(__  )     #
          #  /_/    ____/|__/ \___/\__,_/ /_/|_| /____/      #
          #                                                  #
          #  ___    __                  _____                #
          #  __ |  / /_____________________(_)____________   #
          #  __ | / /_  _ \_  ___/_  ___/_  /_  __ \_  __ \  #
          #  __ |/ / /  __/  /   _(__  )_  / / /_/ /  / / /  #
          #  _____/  \___//_/    /____/ /_/  \____//_/ /_/   #
          #                                                  #
          ####################################################

          REPLACE_HERE
        EOF

        sed -i "s/REPLACE_HERE/This installer archive contains version $releaseName of GTAV_Tweaks./g" "${{ github.workspace }}/library/build/version.txt"
        rm "${{ github.workspace }}/library/build/soundvolumeview-x64.zip"
        rm "${{ github.workspace }}/library/build/AutoHotkey32.zip"
        rm "${{ github.workspace }}/library/build/checkForUpdates.ps1"
        rm "${{ github.workspace }}/library/build/currentVersion.csv"
        rm "${{ github.workspace }}/library/build/macroRecorderTemplate.txt"

        cp "${{ github.workspace }}/library/setup/GTAV_Tweaks_Setup.exe" "${{ github.workspace }}/library/build/"

    - name: Compress Installer Archive
      run: |
        cd "${{ github.workspace }}/library/build"
        zip -r "${{ github.workspace }}/${{ env.FINAL_INSTALLER_ARCHIVE_NAME }}" .


    - name: Set Release Name
      run: |
        if [ "${{ env.IS_PRE_RELEASE }}" == "true" ]; then
          releaseName="v${{ env.RELEASE_VERSION }}-beta"
        else
          releaseName="v${{ env.RELEASE_VERSION }}"
        fi
          echo "RELEASE_NAME=$releaseName" >> $GITHUB_ENV

    - name: Print Release Name
      run: echo "The release name is ${{ env.RELEASE_NAME }}"

    - name: Update Release Tag
      uses: richardsimko/update-tag@v1
      with:
        tag_name: ${{ env.RELEASE_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Draft Main Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: ${{ github.workspace }}/${{ env.FINAL_INSTALLER_ARCHIVE_NAME }}
        artifactErrorsFailBuild: true
        artifactContentType: "application/executable"
        removeArtifacts: true
        replacesArtifacts: true
        body: "Download the ${{ env.FINAL_INSTALLER_ARCHIVE_NAME }} file, extract it and run the setup executable. Have fun :)"
        generateReleaseNotes: true
        makeLatest: true
        prerelease: ${{ env.IS_PRE_RELEASE == 'true' }}
        name: ${{ env.RELEASE_NAME }}
        tag: ${{ env.RELEASE_NAME }}